import os
import random

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, Message
from tinydb.table import Document

import db_functions
import keyboards
import states
from callback_buttons import NavigateButton, NavigateButtonLocation, DataButton, DataType
from db_functions import search_films_by_filters, get_film_by_title, get_film_by_id
from search_filters import SearchFilters

router = Router()


@router.callback_query(NavigateButton.filter(F.location == NavigateButtonLocation.StartSearch))
async def start_search_menu_handler(
        callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    films: list[Document] = data.get("search_result", None)

    is_first_search_result = False
    if films is None:
        films = search_films_by_filters(data["search_filters"])
        if len(films) == 0:
            await callback.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–∑–≤–∏–Ω–∏—Ç–µ(")
            return

        await state.update_data(search_result=films)
        is_first_search_result = True

    selected_film = random.choice(films)
    await state.update_data(selected_film=selected_film)
    await state.set_state(None)
    await send_film_message(callback.message, selected_film, state, is_first_search_result)


@router.message(states.SelectingFilm.waiting_for_film_title)
async def enter_film_title_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    query = message.text
    films = db_functions.search_film_by_party_title(query)

    bot_message = data["bot_message"]
    if len(films) == 0:
        text = (f"üòû –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É <b>{query}</b> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    else:
        text = f"üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É <b>{query}</b> –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∏–ª—å–º—ã:"

    await bot_message.edit_text(
        text, reply_markup=keyboards.get_search_by_title_result_keyboard(films))
    await message.delete()


@router.callback_query(NavigateButton.filter(F.location == NavigateButtonLocation.ShowMovieLinks))
async def show_movie_links_handler(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    film: Document = data.get("selected_film", None)
    if film is None:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...")
        return

    links = '\n'.join(film['links'])
    text = (
        f"üëÄ –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <b>{film['title']}</b>:\n"
        f"{links}"
    )

    path = "films/" + film["image"]
    photo = FSInputFile(path)
    await callback.message.edit_media(
        media=InputMediaPhoto(media=photo, caption=text),
        reply_markup=keyboards.get_show_movie_links_keyboard(film.doc_id)
    )

    await callback.answer()


@router.callback_query(NavigateButton.filter(F.location == NavigateButtonLocation.ShowRelatedMovies))
async def show_related_movies_handler(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    film: Document = data.get("selected_film", None)
    if film is None:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...")
        return

    related_movies = film['relatedMovies']
    text = (f"<b>{film['title']}</b>, {film['ageRestriction']}+\n\n"
            f"–ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —Å —Ç–µ–∫—É—â–∏–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–µ–º.")

    path = "films/" + film["image"]
    photo = FSInputFile(path)
    await callback.message.edit_media(
        media=InputMediaPhoto(media=photo, caption=text),
        reply_markup=keyboards.get_show_related_movies_keyboard(film.doc_id, related_movies)
    )

    await callback.answer()


async def send_film_message(message: Message, film: dict, state: FSMContext, send_as_new: bool = False):
    # todo: —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Å –≤—ã—Ö–æ–¥–æ–º –∑–∞ –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
    text = generate_film_card_text(film)[:1024]

    path = "films/" + film["image"]
    if not os.path.exists(path):
        # todo: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ —Å –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
        print(f"photo_path = {path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    photo = FSInputFile(path)
    if send_as_new:
        bot_message = await message.answer_photo(
            photo=photo, caption=text,
            reply_markup=keyboards.get_film_card_keyboard(film)
        )
        await message.delete()
        await state.update_data(bot_message=bot_message)
    else:
        await message.edit_media(
            media=InputMediaPhoto(media=photo, caption=text),
            reply_markup=keyboards.get_film_card_keyboard(film)
        )


@router.callback_query(DataButton.filter(F.type == DataType.FilmId))
async def navigate_to_film_handler(
        callback: CallbackQuery, callback_data: DataButton, state: FSMContext) -> None:
    data = await state.get_data()
    film_id = int(callback_data.data)
    film = get_film_by_id(film_id)
    if film is not None:
        await state.update_data(selected_film=film)
        await state.set_state(None)
        send_as_new = "bot_message" in data
        await send_film_message(callback.message, film, state, send_as_new)
        await callback.answer()
    else:
        await callback.answer('–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω...')


def generate_film_card_text(film):
    max_quality = max(film['availableQuality'])

    text = (
               "–ú—ã –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∏–ª—å–º –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!\n\n"
               f"<b>{film['title']}</b>, {film['ageRestriction']}+\n"
               f"{film['rating']} ‚≠êÔ∏è\n\n"
               f"<i>{film['description']}</i>\n\n"
               f"<b>–ñ–∞–Ω—Ä—ã</b>: {', '.join(film['genres'])}\n"
               f"<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</b>: {film['duration']} –º–∏–Ω.\n"
               f"<b>–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</b>: {max_quality}p\n"
               f"<b>–ê–∫—Ç—ë—Ä—ã</b>: {', '.join(film['actors'])}"
    )
    return text
