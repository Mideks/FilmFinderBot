from typing import Set, Optional

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

import db_functions
from callback_buttons import *


def get_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.button(text="üîç –ò—Å–∫–∞—Ç—å!",
                   callback_data=NavigateButton(location=NavigateButtonLocation.Search))
    builder.button(text="üñº –ü–æ–∏—Å–∫ –ø–æ –∫–∞–¥—Ä—É",
                   callback_data=NavigateButton(location=NavigateButtonLocation.SearchByFrame))

    return builder.as_markup()


def get_search_film_filters_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.button(text="üé≠ –ñ–∞–Ω—Ä",
                   callback_data=NavigateButton(location=NavigateButtonLocation.SelectGenre))
    builder.button(text="‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥",
                   callback_data=NavigateButton(location=NavigateButtonLocation.SelectRating))
    builder.button(text="üîû –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ",
                   callback_data=NavigateButton(location=NavigateButtonLocation.SelectAgeRestriction))
    builder.button(text="üôé –ê–∫—Ç—ë—Ä—ã",
                   callback_data=NavigateButton(location=NavigateButtonLocation.SelectActor))
    builder.button(text="‚åõÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                   callback_data=NavigateButton(location=NavigateButtonLocation.SelectDuration))
    builder.button(text="‚åõ –ö–∞—á–µ—Å—Ç–≤–æ",
                   callback_data=NavigateButton(location=NavigateButtonLocation.SelectQuality))
    builder.button(text="üîç –ò—Å–∫–∞—Ç—å!",
                   callback_data=NavigateButton(location=NavigateButtonLocation.StartSearch))

    builder.adjust(2, 2, 2, 1)

    return builder.as_markup()


def get_select_genre_keyboard(selected_genres: Set[str]) -> InlineKeyboardMarkup:

    builder = InlineKeyboardBuilder()

    # todo: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã
    genres = ["–ë–æ–µ–≤–∏–∫", "–î—Ä–∞–º–∞", "..."]

    for genre in genres:
        if genre in selected_genres:
            button_text = f"‚úÖ {genre}"
        else:
            button_text = f"{genre}"

        builder.button(
            text=button_text,
            callback_data=DataButton(type=DataType.Genre, data=genre)
        )

    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
                   callback_data=NavigateButton(location=NavigateButtonLocation.Search))

    builder.adjust(1)

    return builder.as_markup()


def get_age_restriction_keyboard(selected_age_restriction: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    age_restrictions = ["0", "6", "12", "16", "18"]

    for age_restriction in age_restrictions:
        if age_restriction == selected_age_restriction:
            button_text = f"‚úÖ {age_restriction}+"
        else:
            button_text = f"{age_restriction}+"

        builder.button(
            text=button_text,
            callback_data=DataButton(type=DataType.AgeRestriction, data=age_restriction)
        )

    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
                   callback_data=NavigateButton(location=NavigateButtonLocation.Search))

    builder.adjust(5, 1)

    return builder.as_markup()


def get_quality_keyboard(selected_quality: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    qualities = ["144", "240", "360", "480", "720", "1080", "1440", "2160"]

    for quality in qualities:
        if quality == selected_quality:
            button_text = f"‚úÖ {quality}p"
        else:
            button_text = f"{quality}p"

        builder.button(
            text=button_text,
            callback_data=DataButton(type=DataType.Quality, data=quality)
        )

    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
                   callback_data=NavigateButton(location=NavigateButtonLocation.Search))

    builder.adjust(4, 4, 1)

    return builder.as_markup()


def get_rating_keyboard(selected_rating: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    default_ratings = ["1.0", "1.5", "2.0", "2.5", "3.0", "3.5", "4.0", "4.5", "5.0"]

    for rating in default_ratings:
        if rating == selected_rating:
            button_text = f"‚úÖ –æ—Ç {rating}"
        else:
            button_text = f"–æ—Ç {rating}"

        builder.button(
            text=button_text,
            callback_data=DataButton(type=DataType.Rating, data=rating)
        )

    any_text = "–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥"
    if float(selected_rating) == 0:
        any_text = f"‚úÖ {any_text}"

    builder.button(
        text=any_text,
        callback_data=DataButton(type=DataType.Rating, data="0")
    )

    if selected_rating not in default_ratings and float(selected_rating) != 0:
        builder.button(
            text=f"‚úÖ –í–∞—à –≤—ã–±–æ—Ä: –æ—Ç {selected_rating:.2f} ‚≠êÔ∏è",
            callback_data=DataButton(type=DataType.Rating, data=selected_rating)
        )

    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
                   callback_data=NavigateButton(location=NavigateButtonLocation.Search))

    builder.adjust(3, 3, 3, 1, 1)

    return builder.as_markup()


def get_duration_keyboard(selected_duration: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    default_durations = ["10", "15", "30", "45", "60", "90", "120", "150", "180"]

    for duration in default_durations:
        button_text = f"–¥–æ {duration} –º–∏–Ω"
        if duration == selected_duration:
            button_text = f"‚úÖ {button_text}"

        builder.button(
            text=button_text,
            callback_data=DataButton(type=DataType.Duration, data=duration)
        )

    any_text = "–õ—é–±–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    if int(selected_duration) == 0:
        any_text = f"‚úÖ {any_text}"

    builder.button(
        text=any_text,
        callback_data=DataButton(type=DataType.Duration, data="0")
    )

    if selected_duration not in default_durations and int(selected_duration) != 0:
        builder.button(
            text=f"‚úÖ –í–∞—à –≤—ã–±–æ—Ä: –¥–æ {selected_duration} –º–∏–Ω ‚è≥",
            callback_data=DataButton(type=DataType.Duration, data=selected_duration)
        )

    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º",
                   callback_data=NavigateButton(location=NavigateButtonLocation.Search))

    builder.adjust(3, 3, 3, 1, 1)

    return builder.as_markup()


def get_film_card_keyboard(film: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    related_movies = film.get("relatedMovies", [])

    builder.button(text="üé≤ –î—Ä—É–≥–æ–π —Ñ–∏–ª—å–º",
                   callback_data=NavigateButton(location=NavigateButtonLocation.StartSearch))
    builder.button(text="üëÅ –ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                   callback_data=NavigateButton(location=NavigateButtonLocation.ShowMovieLinks))

    if len(related_movies) > 0:
        builder.button(text=f"üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã ({len(related_movies)})",
                       callback_data=NavigateButton(location=NavigateButtonLocation.ShowRelatedMovies))

    builder.button(text="‚óÄÔ∏è –ü–æ–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                   callback_data=NavigateButton(location=NavigateButtonLocation.BackToSearch))
    builder.adjust(1)

    return builder.as_markup()


def get_show_movie_links_keyboard(selected_film_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å–º—É",
                   callback_data=DataButton(type=DataType.FilmId, data=str(selected_film_id)))
    builder.adjust(1)

    return builder.as_markup()


def get_show_related_movies_keyboard(selected_film_id: int, related_movies: list[str]):
    builder = InlineKeyboardBuilder()
    # todo: add indicator, that will display, if film in our db
    for related_movie in related_movies:
        movie = db_functions.get_film_by_title(related_movie)

        if movie is not None:
            doc_id = movie.doc_id
            text = f"‚úîÔ∏è {related_movie}"
        else:
            doc_id = -1
            text = f"‚úñÔ∏è {related_movie}"

        builder.button(
            text=text,
            callback_data=DataButton(type=DataType.FilmId, data=str(doc_id))
        )

    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å–º—É",
                   callback_data=DataButton(type=DataType.FilmId, data=str(selected_film_id)))
    builder.adjust(1)

    return builder.as_markup()
